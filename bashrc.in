# .bashrc

# User specific aliases and functions

# Source global definitions
#if [ -f /etc/bashrc ]; then
	. /etc/bashrc
#fi



# How to undefine a function:
# $ unset -f functionName

export PATH=$PATH:/opt/homebrew/bin
export BREW=/opt/homebrew/bin/brew

# User specific aliases and functions
export PS1='[\u@\h \W]$ '
export EDITOR=/usr/bin/vim

function completely() {
  [ -f $(--prefix)/etc/bash_completion ] &&
    source  $($BREW --prefix)/etc/bash_completion

  [ -x /usr/local/bin/aws_completer ] &&
    complete -C '/usr/local/bin/aws_completer' aws

  #    git-prompt.sh \
  for complete in \
      git-completion.bash \
      az \
      brew \
      cf-cli \
      hub.bash_completion.sh 
  do
    [ -f $($BREW --prefix)/etc/bash_completion.d/$complete ] && \
      source $($BREW --prefix)/etc/bash_completion.d/$complete
  done
  
  [ -x /usr/local/etc/bash_completion.d/gmt_completion.bash ] &&
    source /usr/local/etc/bash_completion.d/gmt_completion.bash
}

set -o vi

## replaced with symlinks in ~/bin
## [ -d "/Applications/VMWare Fusion.app"] && \
##   export PATH="$PATH:/Applications/VMware Fusion.app/Contents/Library"

## 
## Age-old ALIASES:
alias mroe='more'
alias m='more'
alias psg='/bin/ps auxgw | egrep -i '
alias tvm='tail /var/log/messages'
alias ls='/bin/ls -F'
alias ll='/bin/ls -l'
alias be='sudo /bin/su - $@'
alias g='git'

# FUNCTIONS:
lh () { /bin/ls -lt $@ | /usr/bin/head; }          
p() { pushd ${1}; }
P() { popd ${1}; }
export ENSCRIPT="--margins=::36:36"

##
## Google Cloud Stuff
##
alias wat='gcloud compute instances list; knife node list'
alias gce='gcloud compute'

##
## Highlighting
##
alias dark='pbpaste | highlight --syntax=rb -O rtf --style nightshimmer | pbcopy'
gceweb(){
  gcloud compute instances list | grep web | perl -ane 'print "$F[0] $F[4]\n"'
}


##
## Everything below here is quite possibly obsolete:
##

# Set Xterm title:  http://tldp.org/HOWTO/Xterm-Title-4.html#ss4.3
case "$TERM" in
    screen)
        PROMPT_COMMAND='echo -ne "\033k$HOSTNAME\033\\"'
        ;;
    xterm)
        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
        ;;
    *)
        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
        ;;
esac

# FUNCTIONS:
hname () {
    case `uname -o` in
        Cygwin) hostname;;
        *)      hostname -s;;
    esac
}

# sudo pip install virtualenvwrapper, then:
VIRTUALENV_SH=/usr/local/bin/virtualenvwrapper.sh
if [ -x $VIRTUALENV_SH ]; then
  [ -d $HOME/.virtualenvs ] || mkdir $HOME/.virtualenvs
  export WORKON_HOME=$HOME/.virtualenvs
  source $VIRTUALENV_SH
fi

# CHEF stuff
alias fluxx='export CHEF_SERVER=fluxx'
alias pdbchef='export CHEF_SERVER=pdbchef'
alias pburkholder_com='export CHEFSERVER=pburkholder_com'
alias myaws='export AWS_DEFAULT_PROFILE=pburkholder'
alias gcaws='export AWS_DEFAULT_PROFILE=govcloud'
# alias chefaws='export AWS_DEFAULT_PROFILE=default'
# my bundle has my own CA
# export SSL_CERT_FILE=$HOME/.chef/bundle.crt

[ -r $HOME/.harvestrc ] && source $HOME/.harvestrc

# Volatility :::
#   mkdir -p /Users/pburkholder/Library/Python/2.7/lib/python/site-packages
#  echo 'import site; site.addsitedir("/usr/local/lib/python2.7/site-packages")' >>
#  /Users/pburkholder/Library/Python/2.7/lib/python/site-packages/homebrew.pth


#function vault-demo-ids() {
# aws autoscaling \
#     describe-auto-scaling-groups --auto-scaling-group-names vault-provision | 
#   jq -r '[.AutoScalingGroups[].Instances[].InstanceId] | join(" ")'
# }


#function vault-demo-ips() {
#   instance_ids=$(vault-demo-ids)
#   aws ec2 describe-instances --instance-ids $instance_ids | 
#     jq -r '.Reservations[].Instances[].PublicIpAddress'
#}

#alias terminate-vault-id='aws autoscaling terminate-instance-in-auto-scaling-group --no-should-decrement-desired-capacity --instance-id '  

#alias inspec_exec='inspec exec
#cookbooks/vault-demo/test/integration/default/serverspec/default_spec.rb
#
#--key-files  ~/.ssh/pburkholder-one'

alias tf='terraform'
alias sandbox='cf target -o sandbox-gsa -s peter.burkholder'
alias sbox=sandbox


## put at end so not clobbered
#if [ -f "$($BREW --prefix bash-git-prompt)/share/gitprompt.sh" ]; then
#  echo "Adding gitprompt"
#  GIT_PROMPT_THEME=Default
#  source "$($BREW --prefix bash-git-prompt)/share/gitprompt.sh"
#else
#  echo "No gitprompt. Try 'brew install bash-git-prompt'"
#fi

# Not sure if this is needed
#export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
export HISTTIMEFORMAT="%d/%m/%y %T "

# One time run:
# fly --target cloud.gov login --concourse-url https://ci.fr.cloud.gov
CLOUD_GOV_RC=$HOME/Projects/pburkholder/dotfiles/cloudgovrc
[ -r $CLOUD_GOV_RC ] && . $CLOUD_GOV_RC

which starship && eval "$(starship init bash)"

export GPG_TTY=$(tty)
alias wordle='curl -s https://gist.githubusercontent.com/bklaas/5f93da478e01af48016c1f3b5025281c/raw/485b2ed5e6d1f33e4041bc56809f0ea8cb0952b2/gistfile1.txt'
alias myip='dig +short myip.opendns.com @resolver1.opendns.com'

function noup() {
  sudo kill $(pstree -s gov.gsa.software_update | tail -3 | awk 'BEGIN {ORS=" "} {print $2}')
}


cd 